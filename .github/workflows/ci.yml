name: tests

on:
  push:
    branches:
      - "*"
    # not on tags
  pull_request:

env:
  RUSTFLAGS: "-D warnings"

jobs:
  cargo_tests:
    name: ${{ matrix.target.name }} ${{ matrix.channel }}
    runs-on: ${{ matrix.target.os }}
    strategy:
      fail-fast: false
      matrix:
        target: [
          { "os": "ubuntu-latest",  "toolchain": "x86_64-unknown-linux-gnu", "name": "Linux GNU" },
          { "os": "macOS-latest",   "toolchain": "x86_64-apple-darwin",      "name": "macOS" },
          { "os": "windows-latest", "toolchain": "x86_64-pc-windows-msvc",   "name": "Windows MSVC" },
          { "os": "windows-latest", "toolchain": "x86_64-pc-windows-gnu",    "name": "Windows GNU" }
        ]
        channel: [
          stable,
          beta,
          nightly,
        ]

    steps:
    - uses: actions/checkout@v1
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ format('{0}-{1}', matrix.channel, matrix.target.toolchain) }}
        profile: minimal
        override: true
    - name: Run all tests
      run: cargo run --quiet
      working-directory: ./run_all_tests

  cross_tests:
    name: cross ${{ matrix.arch }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch:
          - i586-unknown-linux-musl
          - i686-unknown-linux-musl
          - armv7-unknown-linux-gnueabihf
          - aarch64-unknown-linux-gnu
          # Big-endian targets. See https://twitter.com/burntsushi5/status/1695483429997945092.
          - powerpc64-unknown-linux-gnu
          - s390x-unknown-linux-gnu
    steps:
    - uses: actions/checkout@v1
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    - run: cargo install cross
    - run: cross test --target ${{ matrix.arch }}
      working-directory: ./blake2b/
    - run: cross test --target ${{ matrix.arch }} --no-default-features
      working-directory: ./blake2b/
    - run: cross test --target ${{ matrix.arch }}
      working-directory: ./blake2s/
    - run: cross test --target ${{ matrix.arch }} --no-default-features
      working-directory: ./blake2s/

  msrv_test:
    name: MSRV check ${{ matrix.target.name }} ${{ matrix.channel }}
    runs-on: ${{ matrix.target.os }}
    strategy:
      fail-fast: false
      matrix:
        target: [
          { "os": "ubuntu-latest",  "toolchain": "x86_64-unknown-linux-gnu", "name": "Linux GNU" },
          { "os": "macOS-latest",   "toolchain": "x86_64-apple-darwin",      "name": "macOS" },
          { "os": "windows-latest", "toolchain": "x86_64-pc-windows-msvc",   "name": "Windows MSVC" },
          { "os": "windows-latest", "toolchain": "x86_64-pc-windows-gnu",    "name": "Windows GNU" }
        ]
        channel: [
          # The current MSRV. This crate doesn't have an official MSRV policy,
          # but in practice we'll probably do what libc does:
          # https://github.com/rust-lang/libs-team/issues/72.
          # This test target is here so that we notice if we accidentally bump
          # the MSRV, but it's not a promise that we won't bump it.
          "1.66.0",
        ]

    steps:
    - uses: actions/checkout@v1
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ format('{0}-{1}', matrix.channel, matrix.target.toolchain) }}
        profile: minimal
        override: true
    # The `assert_cmd` dev dependency has a higher MSRV, so use `avoid-dev-deps` here.
    - name: Build blake2b
      run: cargo build -Z avoid-dev-deps
      env:
        RUSTC_BOOTSTRAP: 1
      working-directory: ./blake2b
    - name: Build blake2s
      run: cargo build -Z avoid-dev-deps
      env:
        RUSTC_BOOTSTRAP: 1
      working-directory: ./blake2s
    - name: Build blake2_bin
      run: cargo build -Z avoid-dev-deps
      env:
        RUSTC_BOOTSTRAP: 1
      working-directory: ./blake2_bin
